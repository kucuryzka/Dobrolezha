internal class Program
{

    static void alg1()
    {
        int n = int.Parse(Console.ReadLine());
        int[,] matrix = new int[n, n];
        int summ = 0;
        List<int> arr = new List<int> { 1 };
        List<int[]> paths = new List<int[]>();

        createMatrix(n, ref matrix);

        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < n; j++)
            {
                if (matrix[i, j] != 0)
                {
                    paths.Add([i, j, matrix[i, j]]);
                }
            }
        }

        paths = paths.OrderBy(x => x[2]).ToList();

        while (arr.Count < n)
        {
            List<int[]> paths2 = paths.Where(item => arr.Contains(item[0])).ToList();
            for (int i = 0; i < paths2.Count; i++)
            {
                if (arr.Contains(paths2[i][0]) && !arr.Contains(paths2[i][1]))
                {
                    arr.Add(paths2[i][1]);
                    summ += paths2[i][2];
                    break;
                }
            }
        }

        Console.WriteLine(summ);
    }

    static void alg2()
    {
        int n = int.Parse(Console.ReadLine());
        int[,] matrix = new int[n, n];
        int summ = 0;

        Dictionary<int, int> dict = new Dictionary<int, int>();
        for (int i = 0; i < n; i++)
        {
            dict[i + 1] = 0;
        }

        List<int[]> paths = new List<int[]>();

        createMatrix(n, ref matrix);

        for (int i = 0; i < n; i++)
        {
            for (int j = i; j < n; j++)
            {
                if (matrix[i, j] != 0)
                {
                    paths.Add([i + 1, j + 1, matrix[i, j]]);
                }
            }
        }

        paths = paths.OrderBy(x => x[2]).ToList();
        int currentPart = 1;
        dict[paths[0][0]] = currentPart;
        dict[paths[0][1]] = currentPart;
        summ += paths[0][2];

        for (int i = 1; i < paths.Count; i++)
        {
            int[] path = paths[i];

            if (dict[path[0]] == 0 && dict[path[1]] == 0)
            {
                currentPart++;
                dict[path[0]] = currentPart;
                dict[path[1]] = currentPart;
                summ += path[2];
            }
            else
            {
                if (dict[path[0]] == dict[path[1]])
                {
                    continue;
                }
                if ((dict[path[0]] != 0 && dict[path[1]] == 0))
                {
                    dict[path[1]] = currentPart;
                    summ += path[2];
                }
                else if ((dict[path[0]] == 0 && dict[path[1]] != 0))
                {
                    dict[path[0]] = currentPart;
                    summ += path[2];

                }
                else if (dict[path[0]] != dict[path[1]])
                {
                    int minPart = Math.Min(dict[path[1]], dict[path[0]]);
                    int maxPart = Math.Max(dict[path[1]], dict[path[0]]);
                    foreach (var el in dict)
                    {
                        if (el.Value == maxPart)
                        {
                            dict[el.Key] = minPart;
                        }
                    }

                    summ += path[2];
                }
            }


        }

        Console.WriteLine(summ);
    }
    static void createMatrix(int n, ref int[,] matrix)
    {
        for (int i = 0; i < n; i++)
        {
            for (int j = i; j < n; j++)
            {
                int num = int.Parse(Console.ReadLine());
                matrix[i, j] = num;
                matrix[j, i] = num;
            }
        }
    }
    private static void Main(string[] args)
    {
        alg2();
    }
}
