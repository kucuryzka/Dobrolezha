internal class Program
{

    static void createMatrix(int n, ref int[,] matrix)
    {
        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < n; j++)
            {
                matrix[i, j] = int.Parse(Console.ReadLine());
            }
        }
    }
    private static void Main(string[] args)
    {
        int n = int.Parse(Console.ReadLine());
        int[,] matrix = new int[n, n];
        int summ = 0;
        List<int> arr = new List<int> {1};
        List<int[]> paths = new List<int[]>();

        createMatrix(n, ref matrix);

        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < n; j++)
            {
                if (matrix[i, j] != 0)
                {
                    paths.Add([i, j, matrix[i, j]]);
                }
            }
        }

        paths = paths.OrderBy(x => x[2]).ToList();

        while (arr.Count < n)
        {
            List<int[]> paths2 = paths.Where(item => arr.Contains(item[0])).ToList();
            for (int i = 0; i < paths2.Count; i++)
            {
                if (arr.Contains(paths2[i][0]) && !arr.Contains(paths2[i][1]))
                {
                    arr.Add(paths2[i][1]);
                    summ += paths2[i][2];
                    break;
                }
            }
        }

        Console.WriteLine(summ);


    }
}
