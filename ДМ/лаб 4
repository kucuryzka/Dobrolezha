using System.Diagnostics.CodeAnalysis;

internal class Program
{
    void createMatrix(int n, ref int[,] matrix)
    {
        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < n; j++)
            {
                matrix[i, j] = int.Parse(Console.ReadLine());
            }
        }
    }

    static void Print(int[,] arr)
    {
        for (int i = 0; i < 6; i++)
        {
            for (int j = 0; j < 6; j++)
            {
                Console.Write($"{arr[i, j]} ");
            }
            Console.WriteLine();
        }
    }



    private static void Main(string[] args)
    {
        // создание исходной матрицы и матрицы для работы
        int n = int.Parse(Console.ReadLine());
        int[,] matrix = new int[n, n];
        int[,] arr = new int[n, n];
        for (int i = 0; i < n; i++) { for (int j = 0; j < n; j++) { arr[i, j] = 5000; matrix[i, j] = 5000; } }

        //
        matrix[0, 1] = 6; matrix[0, 2] = 6; matrix[0, 5] = 4;
        matrix[1, 3] = 87;
        matrix[2, 0] = 4; matrix[2, 4] = 54; matrix[2, 5] = 56;
        matrix[3, 1] = 5; matrix[3, 4] = 3;
        matrix[4, 0] = 58; matrix[4, 1] = 3;
        matrix[5, 0] = 6; matrix[5, 2] = 8; matrix[5, 3] = 6;
        //

        int start = 2;
        int sum = 0;
        Dictionary<int, int[]> dict = new Dictionary<int, int[]>();
        for (int i = 0; i < n; i++)
        {
            dict[i] = new int[2] {5000, 0};
        }
        dict[start][0] = 0;
        dict[start][1] = 1;

        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < n; j++)
            {
                if (matrix[start, j] != 5000)
                {
                    dict[j][0] =Math.Min(dict[j][0], sum + matrix[start, j]);
                }
            }

            int min_mark = 5000;
            for (int j = 0;j < n; j++)
            {
                
                if (dict[j][1] != 1)
                {
                    if (dict[j][0] < min_mark)
                    {
                        start = j;
                        min_mark = dict[j][0];
                    }  
                }

            }
            sum = dict[start][0];
            dict[start][1] = 1;
        }


        for (int i = 0; i < n; i++)
        {
            Console.WriteLine($"shortest path to {i + 1} = {dict[i][0]}");
        }
        
    }
}
